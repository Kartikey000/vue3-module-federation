export const FEATURE_NAME: string;
export namespace SR_EVENT_EMITTER_TYPES {
    let RECORD: string;
    let PAUSE: string;
    let ERROR_DURING_REPLAY: string;
}
export const AVG_COMPRESSION: 0.12;
export namespace RRWEB_EVENT_TYPES {
    let DomContentLoaded: number;
    let Load: number;
    let FullSnapshot: number;
    let IncrementalSnapshot: number;
    let Meta: number;
    let Custom: number;
}
/** Interval between forcing new full snapshots -- 15 seconds in error mode (x2), 5 minutes in full mode */
export const CHECKOUT_MS: {
    [x: number]: number;
};
export namespace ABORT_REASONS {
    namespace RESET {
        let message: string;
        let sm: string;
    }
    namespace IMPORT {
        let message_1: string;
        export { message_1 as message };
        let sm_1: string;
        export { sm_1 as sm };
    }
    namespace TOO_MANY {
        let message_2: string;
        export { message_2 as message };
        let sm_2: string;
        export { sm_2 as sm };
    }
    namespace TOO_BIG {
        let message_3: string;
        export { message_3 as message };
        let sm_3: string;
        export { sm_3 as sm };
    }
    namespace CROSS_TAB {
        let message_4: string;
        export { message_4 as message };
        let sm_4: string;
        export { sm_4 as sm };
    }
    namespace ENTITLEMENTS {
        let message_5: string;
        export { message_5 as message };
        let sm_5: string;
        export { sm_5 as sm };
    }
}
/** Reserved room for query param attrs */
export const QUERY_PARAM_PADDING: 5000;
export namespace TRIGGERS {
    let API: string;
    let RESUME: string;
    let SWITCH_TO_FULL: string;
    let INITIALIZE: string;
    let PRELOAD: string;
}
//# sourceMappingURL=constants.d.ts.map