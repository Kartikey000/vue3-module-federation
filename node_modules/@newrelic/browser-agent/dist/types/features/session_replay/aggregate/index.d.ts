export class Aggregate extends AggregateBase {
    static featureName: string;
    constructor(agentRef: any, args: any);
    mode: number;
    /** Set once the recorder has fully initialized after flag checks and sampling */
    initialized: boolean;
    /** populated with the gzipper lib async */
    gzipper: typeof import("fflate").gzipSync | undefined;
    /** populated with the u8 string lib async */
    u8: typeof import("fflate").strToU8 | undefined;
    /** set by BCS response */
    entitled: boolean;
    /** set at BCS response, stored in runtime */
    timeKeeper: any;
    instrumentClass: any;
    recorder: any;
    isSessionTrackingEnabled: boolean;
    replayIsActive(): boolean;
    handleError(e: any): void;
    switchToFull(): void;
    /**
     * Evaluate entitlements and sampling before starting feature mechanics, importing and configuring recording library, and setting storage state
     * @param {boolean} srMode - the true/false state of the "sr" flag (aka. entitlements) from RUM response
     * @param {boolean} ignoreSession - whether to force the method to ignore the session state and use just the sample flags
     * @param {TRIGGERS} [trigger=TRIGGERS.INITIALIZE] - the trigger that initiated the recording.  Usually TRIGGERS.INITIALIZE, but could be TRIGGERS.API since in certain cases that trigger calls this method
     * @returns {void}
     */
    initializeRecording(srMode: boolean, ignoreSession: boolean, trigger?: {
        API: string;
        RESUME: string;
        SWITCH_TO_FULL: string;
        INITIALIZE: string;
        PRELOAD: string;
    }): void;
    prepUtils(): Promise<void>;
    makeHarvestPayload(shouldRetryOnFail: any): {
        targetApp: undefined;
        payload: undefined;
    }[] | undefined;
    /**
     * returns the timestamps for the earliest and latest nodes in the provided array, even if out of order
     * @param {Object[]} [nodes] - the nodes to evaluate
     * @returns {{ firstEvent: Object|undefined, lastEvent: Object|undefined }} - the earliest and latest nodes. Defaults to undefined if no nodes are provided or if no timestamps are found in the nodes.
     */
    getFirstAndLastNodes(nodes?: Object[]): {
        firstEvent: Object | undefined;
        lastEvent: Object | undefined;
    };
    getHarvestContents(recorderEvents: any): {
        qs: {
            browser_monitoring_key: any;
            type: string;
            app_id: any;
            protocol_version: string;
            timestamp: any;
            attributes: string;
        };
        body: any;
    };
    postHarvestCleanup(result: any): void;
    /**
     * Forces the agent into OFF mode so that changing tabs or navigating
     * does not restart the recording. This is used when the customer calls
     * the stopRecording API.
     */
    forceStop(forceHarvest: any): void;
    /** Abort the feature, once aborted it will not resume */
    abort(reason: {} | undefined, data: any): void;
    syncWithSessionManager(state?: {}): void;
}
import { AggregateBase } from '../../utils/aggregate-base';
//# sourceMappingURL=index.d.ts.map