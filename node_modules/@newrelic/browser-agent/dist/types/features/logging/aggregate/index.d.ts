export class Aggregate extends AggregateBase {
    static featureName: string;
    constructor(agentRef: any);
    isSessionTrackingEnabled: any;
    loggingMode: any;
    updateLoggingMode(loggingMode: any): void;
    handleLog(timestamp: any, message: any, attributes: {} | undefined, level: string | undefined, targetEntityGuid: any): void;
    serializer(eventBuffer: any, targetEntityGuid: any): {
        common: {
            /** Attributes in the `common` section are added to `all` logs generated in the payload */
            attributes: any;
        };
        /** logs section contains individual unique log entries */
        logs: Object;
    }[];
    queryStringsBuilder(_: any, targetEntityGuid: any): {
        browser_monitoring_key: any;
    };
    /** Abort the feature, once aborted it will not resume */
    abort(reason?: {}): void;
    syncWithSessionManager(state?: {}): void;
}
import { AggregateBase } from '../../utils/aggregate-base';
//# sourceMappingURL=index.d.ts.map