/** The purpose of this class is to manage, normalize, and drop various ST nodes as needed without polluting the main ST modules */
export class TraceStorage {
    constructor(parent: any);
    /** prevents duplication of event nodes by keeping a reference of each one seen per harvest cycle */
    prevStoredEvents: Set<any>;
    parent: any;
    /**
     * Stores a new trace node in the event buffer.
     * @param {TraceNode} node
     * @returns {boolean} true if the node was successfully stored, false otherwise
     */
    storeNode(node: TraceNode): boolean;
    /**
     * Processes a PVT (Page Visibility Timing) entry.
     * @param {*} name
     * @param {*} value
     * @param {*} attrs
     * @returns {boolean} true if the node was successfully stored, false otherwise
     */
    processPVT(name: any, value: any, attrs: any): boolean;
    /**
     * Stores a timing entry in the event buffer.
     * @param {*} timingEntry
     * @param {*} isAbsoluteTimestamp
     * @returns {boolean} true if ALL possible nodes were successfully stored, false otherwise
     */
    storeTiming(timingEntry: any, isAbsoluteTimestamp?: any): boolean;
    /**
     * Tracks the events and their listener's duration on objects wrapped by wrap-events.
     * @param {*} currentEvent - the event to be stored
     * @param {*} target - the target of the event
     * @param {*} start - the start time of the event
     * @param {*} end - the end time of the event
     * @returns {boolean} true if the event was successfully stored, false otherwise
     */
    storeEvent(currentEvent: any, target: any, start: any, end: any): boolean;
    /**
     * Tracks when the window history API specified by wrap-history is used.
     * @param {*} path
     * @param {*} old
     * @param {*} time
     * @returns {boolean} true if the history node was successfully stored, false otherwise
     */
    storeHist(path: any, old: any, time: any): boolean;
    /**
     * Processes all the PerformanceResourceTiming entries captured (by observer).
     * @param {*[]} resources
     * @returns {boolean} true if all resource nodes were successfully stored, false otherwise
     */
    storeResources(resources: any[]): boolean;
    /**
     * JavascriptError (FEATURE) events pipes into ST here.
     * @param {*} type
     * @param {*} name
     * @param {*} params
     * @param {*} metrics
     * @returns {boolean} true if the error node was successfully stored, false otherwise
     */
    storeErrorAgg(type: any, name: any, params: any, metrics: any): boolean;
    /**
     * Ajax (FEATURE) events--XML & fetches--pipes into ST here.
     * @param {*} type
     * @param {*} name
     * @param {*} params
     * @param {*} metrics
     * @returns {boolean} true if the Ajax node was successfully stored, false otherwise
     */
    storeXhrAgg(type: any, name: any, params: any, metrics: any): boolean;
    /**
     * Trims stored trace nodes in the event buffer by start time.
     * @param {number} lookbackDuration
     * @returns {void}
     */
    trimSTNsByTime(lookbackDuration?: number): void;
    /**
     * Trims stored trace nodes in the event buffer before a given index value.
     * @param {number} index
     * @returns {void}
     */
    trimSTNsByIndex(index?: number): void;
    /**
     * clears the stored events in the event buffer.
     * This is used to release references to past events for garbage collection.
     * @returns {void}
     */
    clear(): void;
    #private;
}
import { TraceNode } from './node';
//# sourceMappingURL=storage.d.ts.map