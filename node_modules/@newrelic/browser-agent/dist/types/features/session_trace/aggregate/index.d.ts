export class Aggregate extends AggregateBase {
    static featureName: string;
    constructor(agentRef: any);
    /** Tied to the entitlement flag response from BCS.  Will short circuit operations of the agg if false  */
    entitled: any;
    /** A flag used to decide if the 30 node threshold should be ignored on the first harvest to ensure sending on the first payload */
    everHarvested: boolean;
    /** If the harvest module is harvesting */
    harvesting: boolean;
    /** TraceStorage is a middleware that decides how to format data before passing events to `this.events` */
    traceStorage: TraceStorage;
    /** Sets up event listeners, and initializes this module to run in the correct "mode".  Can be triggered from a few places, but makes an effort to only set up listeners once */
    initialize(stMode: any, stEntitled: any, ignoreSession: any): void;
    initialized: boolean | undefined;
    /** Store session identifiers at initialization time to be cross-checked later at harvest time for session changes that are subject to race conditions */
    ptid: any;
    sessionId: any;
    mode: any;
    preHarvestChecks(): true | undefined;
    serializer(stns: any): Object | undefined;
    queryStringsBuilder(stns: any): {
        browser_monitoring_key: any;
        type: string;
        app_id: any;
        protocol_version: string;
        timestamp: number;
        attributes: string;
    };
    /** Switch from "off" or "error" to full mode (if entitled) */
    switchToFull(): void;
    /** Stop running for the remainder of the page lifecycle */
    abort(code: any): void;
    postHarvestCleanup(result: any): void;
}
import { AggregateBase } from '../../utils/aggregate-base';
import { TraceStorage } from './trace/storage';
//# sourceMappingURL=index.d.ts.map