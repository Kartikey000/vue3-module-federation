/**
   * Any value can be used with the `throw` keyword. This function ensures that the value is
   * either a proper Error instance or attempts to convert it to an UncaughtError instance.
   * @param {any} error The value thrown
   * @returns {Error|UncaughtError} The converted error instance
   */
export function castError(error: any): Error | UncaughtError;
/**
   * Attempts to convert a PromiseRejectionEvent object to an Error object
   * @param {PromiseRejectionEvent} unhandledRejectionEvent The unhandled promise rejection event
   * @returns {Error} An Error object with the message as the casted reason
   */
export function castPromiseRejectionEvent(promiseRejectionEvent: any): Error;
/**
   * Attempts to convert an ErrorEvent object to an Error object
   * @param {ErrorEvent} errorEvent The error event
   * @returns {Error|UncaughtError} The error event converted to an Error object
   */
export function castErrorEvent(errorEvent: ErrorEvent): Error | UncaughtError;
import { UncaughtError } from './uncaught-error';
//# sourceMappingURL=cast-error.d.ts.map