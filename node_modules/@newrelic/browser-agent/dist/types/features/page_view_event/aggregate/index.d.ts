export class Aggregate extends AggregateBase {
    static featureName: string;
    constructor(agentRef: any);
    timeToFirstByte: number;
    firstByteToWindowLoad: number;
    firstByteToDomContent: number;
    /**
     *
     * @param {Function} cb A function to run once the RUM call has finished - Defaults to activateFeatures
     * @param {*} customAttributes custom attributes to attach to the RUM call - Defaults to info.js
     * @param {*} target The target to harvest to - Since we will not know the entityGuid before harvesting, this must be an object directly supplied from the info object or API, not an entityGuid string for lookup with the entityManager - Defaults to { licenseKey: this.agentRef.info.licenseKey, applicationID: this.agentRef.info.applicationID }
     */
    sendRum(customAttributes?: any, target?: any): void;
    rumStartTime: number | undefined;
    postHarvestCleanup({ status, responseText, xhr, targetApp }: {
        status: any;
        responseText: any;
        xhr: any;
        targetApp: any;
    }): void;
    processEntities(entities: any, targetApp: any): void;
}
import { AggregateBase } from '../../utils/aggregate-base';
//# sourceMappingURL=index.d.ts.map