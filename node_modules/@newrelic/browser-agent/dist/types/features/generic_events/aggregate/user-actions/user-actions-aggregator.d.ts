export class UserActionsAggregator {
    constructor(userFrustrationsEnabled: any);
    get aggregationEvent(): AggregatedUserAction | undefined;
    /**
     * Process the event and determine if a new aggregation set should be made or if it should increment the current aggregation
     * @param {Event} evt The event supplied by the addEventListener callback
     * @returns {AggregatedUserAction|undefined} The previous aggregation set if it has been completed by processing the current event
     */
    process(evt: Event, targetFields: any): AggregatedUserAction | undefined;
    markAsErrorClick(): void;
    isLiveClick(): void;
    #private;
}
import { AggregatedUserAction } from './aggregated-user-action';
//# sourceMappingURL=user-actions-aggregator.d.ts.map