/**
 * A minimal agent class designed to only respond to manual user input. As such, this class does not
 * automatically instrument. Instead, each MicroAgent instance will lazy load the required features and can support loading multiple instances on one page.
 * Out of the box, it can manually handle and report Page View, Page Action, and Error events.
 *
 * @note This loader strategy is slated to be deprecated and eventually removed in a future product release. For better memory usage, build size impacts, entity management and relationships -- a new strategy focused around using a single centralized browser agent instance is actively being worked on. Reach out by email to browser-agent@newrelic.com for more information or if you would like to participate in a limited preview when the feature is ready for early adoption.
 *
 * @see {@link https://www.npmjs.com/package/@newrelic/browser-agent#deploying-one-or-more-micro-agents-per-page} for more information in the documentation.
 */
export class MicroAgent extends MicroAgentBase {
    /**
     * @param {import('./agent').AgentOptions} options
     */
    constructor(options: import("./agent").AgentOptions);
    features: {};
    /**
     * Starts a set of agent features if not running in "autoStart" mode
     * {@link https://docs.newrelic.com/docs/browser/new-relic-browser/browser-apis/start/}
     * @param {string|string[]} [featureNames] The feature name(s) to start.  If no name(s) are passed, all features will be started
     */
    start: (featureNames?: string | string[]) => boolean;
    get config(): {
        info: any;
        init: any;
        loader_config: any;
        runtime: any;
    };
    get api(): this;
}
import { MicroAgentBase } from './micro-agent-base';
//# sourceMappingURL=micro-agent.d.ts.map