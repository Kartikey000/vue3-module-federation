/**
 * Class used to adjust the timestamp of harvested data to New Relic server time. This
 * is done by tracking the performance timings of the RUM call and applying a calculation
 * to the harvested data event offset time.
 */
export class TimeKeeper {
    constructor(sessionObj: any);
    get ready(): boolean;
    get correctedOriginTime(): number;
    get localTimeDiff(): number;
    /**
     * Process a rum request to calculate NR server time.
     * @param rumRequest {XMLHttpRequest} The xhr for the rum request
     * @param startTime {number} The start time of the RUM request
     * @param endTime {number} The end time of the RUM request
     * @param nrServerTime {number} the unix number value of the NR server time in MS, returned in the RUM request body
     */
    processRumRequest(rumRequest: XMLHttpRequest, startTime: number, endTime: number, nrServerTime: number): void;
    /**
     * Converts a page origin relative time to an absolute timestamp
     * using the user's local clock.
     * @param relativeTime {number} The relative time of the event in milliseconds
     * @returns {number} Corrected unix/epoch timestamp
     */
    convertRelativeTimestamp(relativeTime: number): number;
    /**
     * Converts an absolute timestamp to a relative timestamp using the
     * user's local clock.
     * @param timestamp
     * @returns {number}
     */
    convertAbsoluteTimestamp(timestamp: any): number;
    /**
     * Corrects an absolute timestamp to NR server time.
     * @param timestamp {number} The unix/epoch timestamp of the event with milliseconds
     * @return {number} Corrected unix/epoch timestamp
     */
    correctAbsoluteTimestamp(timestamp: number): number;
    /**
     * Corrects relative timestamp to NR server time (epoch).
     * @param {DOMHighResTimeStamp} relativeTime
     * @returns {number}
     */
    correctRelativeTimestamp(relativeTime: DOMHighResTimeStamp): number;
    /** Process the session entity and use the info to set the main time calculations if present */
    processStoredDiff(): void;
    #private;
}
//# sourceMappingURL=time-keeper.d.ts.map