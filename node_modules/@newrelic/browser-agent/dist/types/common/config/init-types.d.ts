declare const _default: {};
export default _default;
export type Init = {
    ajax?: {
        /**
         * - List of domain URLs to be excluded from AjaxRequest collection.
         */
        deny_list?: string[] | undefined;
        /**
         * - If true, agent requests going to harvest endpoint are treated as on deny list. In other words, agent will not self-report AJAX.
         */
        block_internal?: boolean | undefined;
        /**
         * - Turn on/off the ajax feature (on by default).
         */
        enabled?: boolean | undefined;
        /**
         * - If true, the agent will automatically start the ajax feature. Otherwise, it will be in a deferred state until the `start` API method is called.
         */
        autoStart?: boolean | undefined;
    } | undefined;
    api?: {
        /**
         * - If true, the agent will allow registered children to be sent to the server.
         */
        allow_registered_children?: boolean | undefined;
        /**
         * - If true, the agent will capture registered child data to the main agent as well as the registered child.
         */
        duplicate_registered_data?: boolean | undefined;
    } | undefined;
    distributed_tracing?: {
        /**
         * - If true, distributed tracing headers will be added to outgoing requests. Requires ajax feature to be running.
         */
        enabled?: boolean | undefined;
        exclude_newrelic_header?: boolean | undefined;
        cors_use_newrelic_header?: boolean | undefined;
        cors_use_tracecontext_headers?: boolean | undefined;
        allowed_origins?: string[] | undefined;
    } | undefined;
    /**
     * - An array of feature flags to enable experimental features.
     */
    feature_flags?: string[] | undefined;
    generic_events?: {
        /**
         * - Turn on/off the generic events feature (on by default). This is required for `PageAction`, `UserAction`, and `BrowserPerformance` events.
         */
        enabled?: boolean | undefined;
        /**
         * - If true, the agent will automatically start the generic events feature. Otherwise, it will be in a deferred state until the `start` API method is called.
         */
        autoStart?: boolean | undefined;
    } | undefined;
    harvest?: {
        /**
         * - The interval in seconds at which the agent will send out data. It's not recommended to change this value.
         */
        interval?: number | undefined;
    } | undefined;
    jserrors?: {
        /**
         * - Turn on/off the jserrors feature (on by default).
         */
        enabled?: boolean | undefined;
        /**
         * - If true, the agent will automatically start the jserrors feature. Otherwise, it will be in a deferred state until the `start` API method is called.
         */
        autoStart?: boolean | undefined;
    } | undefined;
    logging?: {
        /**
         * - Turn on/off the logging feature (on by default).
         */
        enabled?: boolean | undefined;
        /**
         * - If true, the agent will automatically start the logging feature. Otherwise, it will be in a deferred state until the `start` API method is called.
         */
        autoStart?: boolean | undefined;
    } | undefined;
    metrics?: {
        /**
         * - Turn on/off the metrics feature (on by default).
         */
        enabled?: boolean | undefined;
        /**
         * - If true, the agent will automatically start the metrics feature. Otherwise, it will be in a deferred state until the `start` API method is called.
         */
        autoStart?: boolean | undefined;
    } | undefined;
    /**
     * - Array of regexp and corresponding replacement patterns for obfuscating data.
     */
    obfuscate?: Object[] | undefined;
    page_action?: {
        /**
         * - Must be true to allow PageAction events to be captured.
         */
        enabled?: boolean | undefined;
    } | undefined;
    page_view_event?: {
        /**
         * - This setting is ignored! PageViewEvent is always enabled by force.
         */
        enabled?: boolean | undefined;
        /**
         * - If true, the agent will automatically send the RUM request. Otherwise, it will be in a deferred state until the `start` API method is called.
         */
        autoStart?: boolean | undefined;
    } | undefined;
    page_view_timing?: {
        /**
         * - Turn on/off the page view timing feature (on by default).
         */
        enabled?: boolean | undefined;
        /**
         * - If true, the agent will automatically start the page view timing feature. Otherwise, it will be in a deferred state until the `start` API method is called.
         */
        autoStart?: boolean | undefined;
    } | undefined;
    performance?: {
        /**
         * - If true, the agent will capture PerformanceMark events.
         */
        capture_marks?: boolean | undefined;
        /**
         * - If true, the agent will capture PerformanceMeasure events.
         */
        capture_measures?: boolean | undefined;
        /**
         * - If true, `BrowserPerformance` events from marks and measures will include, as attribute(s), the `detail` metadata provided to `markOptions` and `measureOptions`.
         */
        capture_detail?: boolean | undefined;
        resources?: {
            /**
             * - If true, the agent will capture PerformanceResourceTiming entries.
             */
            enabled?: boolean | undefined;
            /**
             * - Array of `initiatorType` strings to filter the desired ResourceTiming entries. By default, all resource types are captured.
             */
            asset_types?: string[] | undefined;
            /**
             * - Each resource URL will be checked against this list to determine if it should be labeled "first party" in the resulting `BrowserPerformance` event.
             */
            first_party_domains?: string[] | undefined;
            /**
             * - When true (default), resource entries associated with New Relic domains will be ignored.
             */
            ignore_newrelic?: boolean | undefined;
        } | undefined;
    } | undefined;
    privacy?: {
        /**
         * - If true (default), session tracking of users across page loads is enabled in the agent. This is required for session trace, replay, and session-related features.
         */
        cookies_enabled?: boolean | undefined;
    } | undefined;
    proxy?: {
        /**
         * - Set value will be used to overwrite the webpack asset path used to fetch agent assets.
         */
        assets?: string | undefined;
        /**
         * - Set value will be used to overwrite the endpoint URL to which we send analytics.
         */
        beacon?: string | undefined;
    } | undefined;
    session?: {
        /**
         * - When session tracking is on, this determines how long a session will last before expiring. Modifying this value is not recommended.
         */
        expiresMs?: number | undefined;
        /**
         * - When session tracking is on, this determines how long a session will last without user activity before expiring. Modifying this value is not recommended.
         */
        inactiveMs?: number | undefined;
    } | undefined;
    session_replay?: {
        /**
         * - If true, the agent will automatically start the session replay feature. Otherwise, it will be in a deferred state until the `start` API method is called.
         */
        autoStart?: boolean | undefined;
        /**
         * - Turn on/off the session replay feature (off by default).
         */
        enabled?: boolean | undefined;
        /**
         * - If true, allow the agent to run rrweb recorder immediately instead of waiting until after the window.load event, for new sessions. Existing sessions ignore this setting.
         */
        preload?: boolean | undefined;
        /**
         * - This setting is deprecated and ineffective. Sampling is controlled in New Relic by server-side configuration.
         */
        sampling_rate?: number | undefined;
        /**
         * - This setting is deprecated and ineffective.
         */
        error_sampling_rate?: number | undefined;
        /**
         * - When true, serialize fonts for collection without public asset url. This is currently broken -- https://github.com/rrweb-io/rrweb/issues/1304.
         */
        collect_fonts?: boolean | undefined;
        /**
         * - When true, serialize images for collection without public asset url. Not recommended for use. This is currently for TESTING as it easily generates payloads too large to be harvested.
         */
        inline_images?: boolean | undefined;
        /**
         * - When true, tries to fetch any missing stylesheets again to inline in replayer.
         */
        fix_stylesheets?: boolean | undefined;
        /**
         * - If true, all input content will be masked with asterisks.
         */
        mask_all_inputs?: boolean | undefined;
        /**
         * - Set value should be in CSS selector syntax and is used to identify matching elements to mask.
         */
        mask_text_selector?: string | undefined;
        /**
         * - Set value should be in CSS selector syntax and is used to identify matching elements to block.
         */
        block_selector?: string | undefined;
        /**
         * - If mask_all_inputs is not true, this object will be used to select what input to mask. Passwords are forcibly always masked.
         */
        mask_input_options?: Object | undefined;
    } | undefined;
    session_trace?: {
        /**
         * - Turn on/off the session trace feature (on by default).
         */
        enabled?: boolean | undefined;
        /**
         * - If true, the agent will automatically start the session trace feature. Otherwise, it will be in a deferred state until the `start` API method is called.
         */
        autoStart?: boolean | undefined;
    } | undefined;
    soft_navigations?: {
        /**
         * - Turn on/off the soft navigations feature (on by default).
         */
        enabled?: boolean | undefined;
        /**
         * - If true, the agent will automatically start the soft navigations feature. Otherwise, it will be in a deferred state until the `start` API method is called.
         */
        autoStart?: boolean | undefined;
    } | undefined;
    spa?: {
        /**
         * - Turn on/off the single page application feature (on by default). NOTE: the SPA feature is deprecated and under removal procedure.
         */
        enabled?: boolean | undefined;
        /**
         * - If true, the agent will automatically start the single page application feature. Otherwise, it will be in a deferred state until the `start` API method is called.
         */
        autoStart?: boolean | undefined;
    } | undefined;
    /**
     * - If explicitly false, the agent will use HTTP instead of HTTPS. This setting should NOT be used.
     */
    ssl?: boolean | undefined;
    user_actions?: {
        /**
         * - Must be true to allow UserAction events to be captured.
         */
        enabled?: boolean | undefined;
        /**
         * - List of HTML Element properties to be captured with UserAction events' target elements. This may help to identify the source element being interacted with in the UI.
         */
        elementAttributes?: string[] | undefined;
    } | undefined;
};
//# sourceMappingURL=init-types.d.ts.map