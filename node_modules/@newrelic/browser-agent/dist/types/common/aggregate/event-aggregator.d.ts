/**
 * An extension of the Aggregator class that provides an interface similar to that of EventBuffer class.
 * This typecasting allow features that uses Aggregator as their event handler to share the same AggregateBase.events utilization by those features.
 */
export class EventAggregator {
    byteSize(): number;
    isEmpty({ aggregatorTypes }: {
        aggregatorTypes: any;
    }): any;
    add([type, name, params, newMetrics, customParams]: [any, any, any, any, any]): boolean;
    addMetric(type: any, name: any, params: any, value: any): boolean;
    save({ aggregatorTypes }: {
        aggregatorTypes: any;
    }): void;
    get(opts: any): {} | null;
    clear({ aggregatorTypes }?: {}): void;
    reloadSave({ aggregatorTypes }: {
        aggregatorTypes: any;
    }): void;
    clearSave({ aggregatorTypes }: {
        aggregatorTypes: any;
    }): void;
    #private;
}
//# sourceMappingURL=event-aggregator.d.ts.map