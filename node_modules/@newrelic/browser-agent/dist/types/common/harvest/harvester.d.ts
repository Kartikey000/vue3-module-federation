/**
  * Initiate a harvest call.
  * @param {NetworkSendSpec} param0 Specification for sending data
  * @returns {boolean} True if a network call was made. Note that this does not mean or guarantee that it was successful.
  */
export function send(agentRef: any, { endpoint, targetApp, payload, localOpts, submitMethod, cbFinished, raw, featureName }: {
    endpoint: any;
    targetApp: any;
    payload: any;
    localOpts?: {} | undefined;
    submitMethod: any;
    cbFinished: any;
    raw: any;
    featureName: any;
}): boolean;
export class Harvester {
    constructor(agentRef: any);
    initializedAggregates: any[];
    agentRef: any;
    startTimer(harvestInterval?: any): void;
    /**
     * Given a feature (aggregate), execute a harvest on-demand.
     * @param {object} aggregateInst
     * @param {object} localOpts
     * @returns {boolean} True if 1+ network call was made. Note that this does not mean or guarantee that it was successful (or that all were in the case of more than 1).
     */
    triggerHarvestFor(aggregateInst: object, localOpts?: object): boolean;
    #private;
}
export type NetworkSendSpec = import("./types.js").NetworkSendSpec;
//# sourceMappingURL=harvester.d.ts.map