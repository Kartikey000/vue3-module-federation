"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configure = configure;
var _topLevelCallers = require("../api/topLevelCallers");
var _nreum = require("../../common/window/nreum");
var _info = require("../../common/config/info");
var _init = require("../../common/config/init");
var _runtime = require("../../common/config/runtime");
var _featureFlags = require("../../common/util/feature-flags");
var _runtime2 = require("../../common/constants/runtime");
var _publicPath = require("./public-path");
var _contextualEe = require("../../common/event-emitter/contextual-ee");
var _globalEvent = require("../../common/dispatch/global-event");
var _loaderConfig = require("../../common/config/loader-config");
/**
 * Copyright 2020-2025 New Relic, Inc. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

const alreadySetOnce = new Set(); // the configure() function can run multiple times in agent lifecycle for different agents

/**
 * Sets or re-sets the agent's configuration values from global settings. This also attach those as properties to the agent instance.
 * IMPORTANT: setNREUMInitializedAgent must be called on the agent prior to calling this function.
 */
function configure(agent, opts = {}, loaderType, forceDrain) {
  // eslint-disable-next-line camelcase
  let {
    init,
    info,
    loader_config,
    runtime = {},
    exposed = true
  } = opts;
  if (!info) {
    const nr = (0, _nreum.gosCDN)();
    init = nr.init;
    info = nr.info;
    // eslint-disable-next-line camelcase
    loader_config = nr.loader_config;
  }
  agent.init = (0, _init.mergeInit)(init || {});
  // eslint-disable-next-line camelcase
  agent.loader_config = (0, _loaderConfig.mergeLoaderConfig)(loader_config || {});
  info.jsAttributes ??= {};
  if (_runtime2.isWorkerScope) {
    // add a default attr to all worker payloads
    info.jsAttributes.isWorker = true;
  }
  agent.info = (0, _info.mergeInfo)(info);
  const updatedInit = agent.init;
  const internalTrafficList = [info.beacon, info.errorBeacon];
  if (!alreadySetOnce.has(agent.agentIdentifier)) {
    if (updatedInit.proxy.assets) {
      (0, _publicPath.redefinePublicPath)(updatedInit.proxy.assets);
      internalTrafficList.push(updatedInit.proxy.assets);
    }
    if (updatedInit.proxy.beacon) internalTrafficList.push(updatedInit.proxy.beacon);
    agent.beacons = [...internalTrafficList];
    (0, _topLevelCallers.setTopLevelCallers)(agent); // no need to set global APIs on newrelic obj more than once
    (0, _nreum.addToNREUM)('activatedFeatures', _featureFlags.activatedFeatures);

    // Update if soft_navigations is allowed to run AND part of this agent build, used to override old spa functions.
    agent.runSoftNavOverSpa &&= updatedInit.soft_navigations.enabled === true && updatedInit.feature_flags.includes('soft_nav');
  }
  runtime.denyList = [...(updatedInit.ajax.deny_list || []), ...(updatedInit.ajax.block_internal ? internalTrafficList : [])];
  runtime.ptid = agent.agentIdentifier;
  runtime.loaderType = loaderType;
  agent.runtime = (0, _runtime.mergeRuntime)(runtime);
  if (!alreadySetOnce.has(agent.agentIdentifier)) {
    agent.ee = _contextualEe.ee.get(agent.agentIdentifier);
    agent.exposed = exposed;
    (0, _globalEvent.dispatchGlobalEvent)({
      agentIdentifier: agent.agentIdentifier,
      drained: !!_featureFlags.activatedFeatures?.[agent.agentIdentifier],
      type: 'lifecycle',
      name: 'initialize',
      feature: undefined,
      data: agent.config
    });
  }
  alreadySetOnce.add(agent.agentIdentifier);
}