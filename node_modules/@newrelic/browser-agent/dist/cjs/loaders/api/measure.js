"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setupMeasureAPI = setupMeasureAPI;
var _handle = require("../../common/event-emitter/handle");
var _now = require("../../common/timing/now");
var _console = require("../../common/util/console");
var _features = require("../features/features");
var _constants = require("./constants");
var _sharedHandlers = require("./sharedHandlers");
/**
 * Copyright 2020-2025 New Relic, Inc. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

function setupMeasureAPI(agent) {
  (0, _sharedHandlers.setupAPI)(_constants.MEASURE, function (name, options) {
    const n = (0, _now.now)();
    const {
      start,
      end,
      customAttributes
    } = options || {};
    const returnObj = {
      customAttributes: customAttributes || {}
    };
    if (typeof returnObj.customAttributes !== 'object' || typeof name !== 'string' || name.length === 0) {
      (0, _console.warn)(57);
      return;
    }

    /**
     * getValueFromTiming - Helper function to extract a numeric value from a supplied option.
     * @param {Number|PerformanceMark} [timing] The timing value
     * @param {Number} [d] The default value to return if timing is invalid
     * @returns {Number} The timing value or the default value
     */
    const getValueFromTiming = (timing, d) => {
      if (timing == null) return d;
      if (typeof timing === 'number') return timing;
      if (timing instanceof PerformanceMark) return timing.startTime;
      return Number.NaN;
    };
    returnObj.start = getValueFromTiming(start, 0);
    returnObj.end = getValueFromTiming(end, n);
    if (Number.isNaN(returnObj.start) || Number.isNaN(returnObj.end)) {
      (0, _console.warn)(57);
      return;
    }
    returnObj.duration = returnObj.end - returnObj.start;
    if (returnObj.duration < 0) {
      (0, _console.warn)(58);
      return;
    }
    (0, _handle.handle)(_constants.prefix + _constants.MEASURE, [returnObj, name], undefined, _features.FEATURE_NAMES.genericEvents, agent.ee);
    return returnObj;
  }, agent);
}