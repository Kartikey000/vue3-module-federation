"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.appendJsAttribute = appendJsAttribute;
exports.setupAPI = setupAPI;
var _globalEvent = require("../../common/dispatch/global-event");
var _handle = require("../../common/event-emitter/handle");
var _now = require("../../common/timing/now");
var _console = require("../../common/util/console");
var _featureFlags = require("../../common/util/feature-flags");
var _constants = require("../../features/metrics/constants");
var _agentBase = require("../agent-base");
var _features = require("../features/features");
var _constants2 = require("./constants");
/**
 * Copyright 2020-2025 New Relic, Inc. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * setupAPI is a utility function that assigns API methods to an object while emitting supportability metrics and global events.
 * @param {string} name The API method name to be set up.
 * @param {Function} fn The function to be executed when the API method is called.
 * @param {Object} agent The agent instance.  Will be used if no object is provided to assign the api method to.
 * @param {Object} [obj] The object to which the API method will be assigned.
 * @returns {*} The output of the function being called.
 */
function setupAPI(name, fn, agent, obj) {
  /* use object if provided, otherwise use agent as base for api method assignment */
  const api = obj || agent;
  // We only set the global API event if the API is not already overridden from the default
  if (!api || !!api[name] && api[name] !== _agentBase.AgentBase.prototype[name]) return;
  api[name] = function () {
    (0, _handle.handle)(_constants.SUPPORTABILITY_METRIC_CHANNEL, ['API/' + name + '/called'], undefined, _features.FEATURE_NAMES.metrics, agent.ee);
    (0, _globalEvent.dispatchGlobalEvent)({
      agentIdentifier: agent.agentIdentifier,
      drained: !!_featureFlags.activatedFeatures?.[agent.agentIdentifier],
      type: 'data',
      name: 'api',
      feature: _constants2.prefix + name,
      data: {}
    });
    try {
      return fn.apply(this, arguments);
    } catch (err) {
      (0, _console.warn)(23, err);
    }
  };
}

/**
   * Attach the key-value attribute onto agent payloads. All browser events in NR will be affected.
   * @param {Agent} agent the agent instance reference
   * @param {string} key
   * @param {string|number|boolean|null} value - null indicates the key should be removed or erased
   * @param {string} apiName
   * @param {boolean} addToBrowserStorage - whether this attribute should be stored in browser storage API and retrieved by the next agent context or initialization
   * @returns @see apiCall
   */
function appendJsAttribute(agent, key, value, apiName, addToBrowserStorage) {
  const currentInfo = agent.info;
  if (value === null) {
    delete currentInfo.jsAttributes[key];
  } else {
    currentInfo.jsAttributes[key] = value;
  }
  if (addToBrowserStorage || value === null) (0, _handle.handle)(_constants2.prefix + apiName, [(0, _now.now)(), key, value], undefined, 'session', agent.ee);
}