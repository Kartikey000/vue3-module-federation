"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Logging = exports.Instrument = void 0;
var _instrumentBase = require("../../utils/instrument-base");
var _constants = require("../constants");
var _utils = require("../shared/utils");
var _wrapLogger = require("../../../common/wrap/wrap-logger");
var _runtime = require("../../../common/constants/runtime");
var _log = require("../../../loaders/api/log");
var _wrapLogger2 = require("../../../loaders/api/wrapLogger");
var _register = require("../../../loaders/api/register");
var _monkeyPatched = require("../../../common/util/monkey-patched");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /**
 * Copyright 2020-2025 New Relic, Inc. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
class Instrument extends _instrumentBase.InstrumentBase {
  static featureName = _constants.FEATURE_NAME;
  constructor(agentRef) {
    super(agentRef, _constants.FEATURE_NAME);

    /** feature specific APIs */
    (0, _log.setupLogAPI)(agentRef);
    (0, _wrapLogger2.setupWrapLoggerAPI)(agentRef);
    (0, _register.setupRegisterAPI)(agentRef);
    const instanceEE = this.ee;
    const globals = ['log', 'error', 'warn', 'info', 'debug', 'trace'];
    globals.forEach(method => {
      (0, _monkeyPatched.isNative)(_runtime.globalScope.console[method]);
      (0, _wrapLogger.wrapLogger)(instanceEE, _runtime.globalScope.console, method, {
        level: method === 'log' ? 'info' : method
      });
    });

    /** emitted by wrap-logger function */
    this.ee.on('wrap-logger-end', function handleLog([message]) {
      const {
        level,
        customAttributes
      } = this;
      (0, _utils.bufferLog)(instanceEE, message, customAttributes, level);
    });
    this.importAggregator(agentRef, () => Promise.resolve().then(() => _interopRequireWildcard(require(/* webpackChunkName: "logging-aggregate" */'../aggregate'))));
  }
}
exports.Instrument = Instrument;
const Logging = exports.Logging = Instrument;