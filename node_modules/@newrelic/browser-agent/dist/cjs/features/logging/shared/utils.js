"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bufferLog = bufferLog;
exports.isValidLogLevel = isValidLogLevel;
var _handle = require("../../../common/event-emitter/handle");
var _now = require("../../../common/timing/now");
var _features = require("../../../loaders/features/features");
var _constants = require("../../metrics/constants");
var _constants2 = require("../constants");
/**
 * Copyright 2020-2025 New Relic, Inc. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
   * @param {ContextualEE} ee - The contextual ee tied to the instance
   * @param {string} message - the log message string
   * @param {{[key: string]: *}} customAttributes - The log's custom attributes if any
   * @param {enum} level - the log level enum
   * @param {object=} targetEntityGuid - the optional target entity guid provided by an api call
   */
function bufferLog(ee, message, customAttributes = {}, level = _constants2.LOG_LEVELS.INFO, targetEntityGuid, timestamp = (0, _now.now)()) {
  (0, _handle.handle)(_constants.SUPPORTABILITY_METRIC_CHANNEL, ["API/logging/".concat(level.toLowerCase(), "/called")], undefined, _features.FEATURE_NAMES.metrics, ee);
  (0, _handle.handle)(_constants2.LOGGING_EVENT_EMITTER_CHANNEL, [timestamp, message, customAttributes, level, targetEntityGuid], undefined, _features.FEATURE_NAMES.logging, ee);
}

/**
 * Checks if a supplied log level is acceptable for use in generating a log event
 * @param {string} level -- must be cast to uppercase before running this test
 * @returns {boolean}
 */
function isValidLogLevel(level) {
  if (typeof level !== 'string') return false;
  return Object.values(_constants2.LOG_LEVELS).some(logLevel => logLevel === level.toUpperCase().trim());
}