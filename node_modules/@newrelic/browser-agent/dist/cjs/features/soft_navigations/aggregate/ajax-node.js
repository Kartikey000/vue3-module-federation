"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AjaxNode = void 0;
var _belSerializer = require("../../../common/serialize/bel-serializer");
var _constants = require("../constants");
var _belNode = require("./bel-node");
/**
 * Copyright 2020-2025 New Relic, Inc. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

class AjaxNode extends _belNode.BelNode {
  constructor(ajaxEvent, ajaxContext) {
    super();
    this.belType = _constants.NODE_TYPE.AJAX;
    this.method = ajaxEvent.method;
    this.status = ajaxEvent.status;
    this.domain = ajaxEvent.domain;
    this.path = ajaxEvent.path;
    this.txSize = ajaxEvent.requestSize;
    this.rxSize = ajaxEvent.responseSize;
    this.requestedWith = ajaxEvent.type === 'fetch' ? 1 : ''; // 'xhr' and 'beacon' types get the empty string
    this.spanId = ajaxEvent.spanId;
    this.traceId = ajaxEvent.traceId;
    this.spanTimestamp = ajaxEvent.spanTimestamp;
    this.gql = ajaxEvent.gql;
    this.start = ajaxEvent.startTime;
    this.end = ajaxEvent.endTime;
    if (ajaxContext?.latestLongtaskEnd) {
      this.callbackEnd = Math.max(ajaxContext.latestLongtaskEnd, this.end); // typically lt end if non-zero, but added clamping to end just in case
      this.callbackDuration = this.callbackEnd - this.end; // callbackDuration is the time from ajax loaded to last long task observed from it
    } else this.callbackEnd = this.end; // if no long task was observed, callbackEnd is the same as end
  }
  serialize(parentStartTimestamp, agentRef) {
    const addString = (0, _belSerializer.getAddStringContext)(agentRef.runtime.obfuscator);
    const nodeList = [];

    // IMPORTANT: The order in which addString is called matters and correlates to the order in which string shows up in the harvest payload. Do not re-order the following code.
    const fields = [(0, _belSerializer.numeric)(this.belType), 0,
    // this will be overwritten below with number of attached nodes
    (0, _belSerializer.numeric)(this.start - parentStartTimestamp),
    // start relative to parent start (if part of first node in payload) or first parent start
    (0, _belSerializer.numeric)(this.end - this.start),
    // end is relative to start
    (0, _belSerializer.numeric)(this.callbackEnd - this.end),
    // callbackEnd is relative to end
    (0, _belSerializer.numeric)(this.callbackDuration),
    // not relative
    addString(this.method), (0, _belSerializer.numeric)(this.status), addString(this.domain), addString(this.path), (0, _belSerializer.numeric)(this.txSize), (0, _belSerializer.numeric)(this.rxSize), this.requestedWith, addString(this.nodeId), (0, _belSerializer.nullable)(this.spanId, addString, true) + (0, _belSerializer.nullable)(this.traceId, addString, true) + (0, _belSerializer.nullable)(this.spanTimestamp, _belSerializer.numeric)];
    let allAttachedNodes = [];
    if (typeof this.gql === 'object') allAttachedNodes = (0, _belSerializer.addCustomAttributes)(this.gql, addString);
    this.children.forEach(node => allAttachedNodes.push(node.serialize())); // no children is expected under ajax nodes at this time

    fields[1] = (0, _belSerializer.numeric)(allAttachedNodes.length);
    nodeList.push(fields);
    if (allAttachedNodes.length) nodeList.push(allAttachedNodes.join(';'));
    return nodeList.join(';');
  }
}
exports.AjaxNode = AjaxNode;