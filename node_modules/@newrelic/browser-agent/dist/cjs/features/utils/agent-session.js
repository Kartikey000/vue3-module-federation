"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setupAgentSession = setupAgentSession;
var _drain = require("../../common/drain/drain");
var _contextualEe = require("../../common/event-emitter/contextual-ee");
var _registerHandler = require("../../common/event-emitter/register-handler");
var _sessionEntity = require("../../common/session/session-entity");
var _localStorage = require("../../common/storage/local-storage.js");
var _constants = require("../../common/session/constants");
var _info = require("../../common/config/info");
var _attributeSize = require("../../common/util/attribute-size");
/**
 * Copyright 2020-2025 New Relic, Inc. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

function setupAgentSession(agentRef) {
  if (agentRef.runtime.session) return agentRef.runtime.session; // already setup

  const sessionInit = agentRef.init.session;
  agentRef.runtime.session = new _sessionEntity.SessionEntity({
    agentIdentifier: agentRef.agentIdentifier,
    key: _constants.DEFAULT_KEY,
    storage: new _localStorage.LocalStorage(),
    expiresMs: sessionInit?.expiresMs,
    inactiveMs: sessionInit?.inactiveMs
  });

  // Retrieve & re-add all of the persisted setCustomAttribute|setUserId k-v from previous page load(s), if any was stored.
  const customSessionData = agentRef.runtime.session.state.custom;
  if (customSessionData && Object.keys(customSessionData).length) {
    /** stored attributes from previous page should not take precedence over attributes stored on this page via API before the page load */
    agentRef.info = (0, _info.mergeInfo)({
      ...agentRef.info,
      jsAttributes: {
        ...customSessionData,
        ...agentRef.info.jsAttributes
      }
    });
  }

  /** track changes to the jsAttributes field over time for aiding with harvest mechanics */
  agentRef.runtime.jsAttributesMetadata = (0, _attributeSize.trackObjectAttributeSize)(agentRef.info, 'jsAttributes');
  const sharedEE = _contextualEe.ee.get(agentRef.agentIdentifier);

  // any calls to newrelic.setCustomAttribute(<persisted>) will need to be added to:
  // local info.jsAttributes {}
  // the session's storage API
  (0, _registerHandler.registerHandler)('api-setCustomAttribute', (time, key, value) => {
    agentRef.runtime.session.syncCustomAttribute(key, value);
  }, 'session', sharedEE);

  // any calls to newrelic.setUserId(...) will need to be added to:
  // local info.jsAttributes {}
  // the session's storage API
  (0, _registerHandler.registerHandler)('api-setUserId', (time, key, value) => {
    agentRef.runtime.session.syncCustomAttribute(key, value);
  }, 'session', sharedEE);
  (0, _drain.drain)(agentRef.agentIdentifier, 'session');
  return agentRef.runtime.session;
}