"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FeatureBase = void 0;
var _contextualEe = require("../../common/event-emitter/contextual-ee");
var _drain = require("../../common/drain/drain");
/**
 * Copyright 2020-2025 New Relic, Inc. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

class FeatureBase {
  constructor(agentIdentifier, featureName) {
    /** @type {string} */
    this.agentIdentifier = agentIdentifier;
    /** @type {import('../../common/event-emitter/contextual-ee').ee} */
    this.ee = _contextualEe.ee.get(agentIdentifier);
    /** @type {string} */
    this.featureName = featureName;
    /**
     * Blocked can be used to prevent aggregation and harvest after inititalization time of the feature.
     * This can currently happen if RUM response setToken flag is 0, which is tied to ingest account entitlement info.
     * @type {boolean}
     */
    this.blocked = false;
  }
  deregisterDrain() {
    (0, _drain.deregisterDrain)(this.agentIdentifier, this.featureName);
  }
}
exports.FeatureBase = FeatureBase;