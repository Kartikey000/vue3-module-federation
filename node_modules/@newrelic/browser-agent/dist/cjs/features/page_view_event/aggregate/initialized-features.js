"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getActivatedFeaturesFlags = getActivatedFeaturesFlags;
var _features = require("../../../loaders/features/features");
var _nreum = require("../../../common/window/nreum");
/**
 * Copyright 2020-2025 New Relic, Inc. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Get an array of flags required by downstream (NR UI) based on the features initialized in this agent
 * (aka what is running on the page).
 * @param {String} agentId - the ID of the initialized agent on the page, mapping to the one under the global 'newrelic' object
 * @returns {String[]} Up to 5 short strings corresponding to ingest mapping of features.
 */
function getActivatedFeaturesFlags(agentId) {
  const flagArr = [];
  const newrelic = (0, _nreum.gosNREUM)();
  try {
    Object.keys(newrelic.initializedAgents[agentId].features).forEach(featName => {
      switch (featName) {
        case _features.FEATURE_NAMES.ajax:
          flagArr.push('xhr');
          break;
        case _features.FEATURE_NAMES.jserrors:
          flagArr.push('err');
          break;
        case _features.FEATURE_NAMES.genericEvents:
          flagArr.push('ins');
          break;
        case _features.FEATURE_NAMES.sessionTrace:
          flagArr.push('stn');
          break;
        case _features.FEATURE_NAMES.softNav:
        case _features.FEATURE_NAMES.spa:
          flagArr.push('spa');
          break;
      }
    });
  } catch (e) {}
  return flagArr;
}

// Note: this module and the "af" param in src/features/page_view_event/aggregate/index.js can be removed in the future at such time
// that it's no longer being used. For the browser agent, this is an unused flag system.