"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PageViewEvent = exports.Instrument = void 0;
var _handle = require("../../../common/event-emitter/handle");
var _setPageViewName = require("../../../loaders/api/setPageViewName");
var _instrumentBase = require("../../utils/instrument-base");
var CONSTANTS = _interopRequireWildcard(require("../constants"));
var _constants2 = require("../../../common/session/constants");
var _globalEvent = require("../../../common/dispatch/global-event");
var _load = require("../../../common/window/load");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /**
 * Copyright 2020-2025 New Relic, Inc. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
class Instrument extends _instrumentBase.InstrumentBase {
  static featureName = CONSTANTS.FEATURE_NAME;
  constructor(agentRef) {
    super(agentRef, CONSTANTS.FEATURE_NAME);

    /** setup inspection events for window lifecycle */
    this.setupInspectionEvents(agentRef.agentIdentifier);

    /** feature specific APIs */
    (0, _setPageViewName.setupSetPageViewNameAPI)(agentRef);

    /** messages from the register API that can trigger a new RUM call */
    this.ee.on('api-send-rum', (attrs, target) => (0, _handle.handle)('send-rum', [attrs, target], undefined, this.featureName, this.ee));
    this.importAggregator(agentRef, () => Promise.resolve().then(() => _interopRequireWildcard(require(/* webpackChunkName: "page_view_event-aggregate" */'../aggregate'))));
  }
  setupInspectionEvents(agentIdentifier) {
    const dispatch = (evt, name) => {
      if (!evt) return;
      (0, _globalEvent.dispatchGlobalEvent)({
        agentIdentifier,
        timeStamp: evt.timeStamp,
        loaded: evt.target.readyState === 'complete',
        type: 'window',
        name,
        data: evt.target.location + ''
      });
    };
    (0, _load.onDOMContentLoaded)(evt => {
      dispatch(evt, 'DOMContentLoaded');
    });
    (0, _load.onWindowLoad)(evt => {
      dispatch(evt, 'load');
    });
    (0, _load.onPopstateChange)(evt => {
      dispatch(evt, 'navigate');
    });
    this.ee.on(_constants2.SESSION_EVENTS.UPDATE, (_, data) => {
      (0, _globalEvent.dispatchGlobalEvent)({
        agentIdentifier,
        type: 'lifecycle',
        name: 'session',
        data
      });
    });
  }
}
exports.Instrument = Instrument;
const PageViewEvent = exports.PageViewEvent = Instrument;