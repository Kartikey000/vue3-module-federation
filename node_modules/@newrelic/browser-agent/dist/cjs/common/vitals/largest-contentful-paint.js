"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.largestContentfulPaint = void 0;
var _attribution = require("web-vitals/attribution");
var _vitalMetric = require("./vital-metric");
var _constants = require("./constants");
var _runtime = require("../constants/runtime");
var _cleanUrl = require("../url/clean-url");
/**
 * Copyright 2020-2025 New Relic, Inc. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

const largestContentfulPaint = exports.largestContentfulPaint = new _vitalMetric.VitalMetric(_constants.VITAL_NAMES.LARGEST_CONTENTFUL_PAINT);
if (_runtime.isBrowserScope) {
  (0, _attribution.onLCP)(({
    value,
    attribution
  }) => {
    /* Largest Contentful Paint - As of WV v3, it still imperfectly tries to detect document vis state asap and isn't supposed to report if page starts hidden. */
    if (_runtime.initiallyHidden || largestContentfulPaint.isValid) return;
    let attrs;
    const lcpEntry = attribution.lcpEntry;
    if (lcpEntry) {
      attrs = {
        size: lcpEntry.size,
        eid: lcpEntry.id,
        element: attribution.element,
        timeToFirstByte: attribution.timeToFirstByte,
        resourceLoadDelay: attribution.resourceLoadDelay,
        resourceLoadDuration: attribution.resourceLoadDuration,
        resourceLoadTime: attribution.resourceLoadDuration,
        // kept for NR backwards compatibility, deprecated in v3->v4
        elementRenderDelay: attribution.elementRenderDelay,
        ...(attribution.navigationEntry && {
          pageUrl: (0, _cleanUrl.cleanURL)(attribution.navigationEntry.name)
        }) // used to ensure the LCP gets the correct URL at harvest time if a soft nav has occurred before page load
      };
      if (attribution.url) attrs.elUrl = (0, _cleanUrl.cleanURL)(attribution.url);
      if (lcpEntry.element?.tagName) attrs.elTag = lcpEntry.element.tagName;
    }
    largestContentfulPaint.update({
      value,
      attrs
    });
  });
}