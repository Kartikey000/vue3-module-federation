"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timeToFirstByte = void 0;
var _runtime = require("../constants/runtime");
var _constants = require("./constants");
var _vitalMetric = require("./vital-metric");
var _attribution = require("web-vitals/attribution");
/**
 * Copyright 2020-2025 New Relic, Inc. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

const timeToFirstByte = exports.timeToFirstByte = new _vitalMetric.VitalMetric(_constants.VITAL_NAMES.TIME_TO_FIRST_BYTE);

/**
 * onTTFB is not supported in the following scenarios:
 * - in a non-browser scope
 * - in browsers that do not support PerformanceNavigationTiming API
 * - in an iOS browser
 * - cross-origin iframes specifically in firefox and safari
 */
if (_runtime.isBrowserScope && typeof PerformanceNavigationTiming !== 'undefined' && !_runtime.isiOS && window === window.parent) {
  (0, _attribution.onTTFB)(({
    value,
    attribution
  }) => {
    if (timeToFirstByte.isValid) return;
    timeToFirstByte.update({
      value,
      attrs: {
        navigationEntry: attribution.navigationEntry
      }
    });
  });
} else {
  if (!timeToFirstByte.isValid) {
    const entry = {};
    // convert real timestamps to relative timestamps to match web-vitals behavior
    for (let key in _runtime.globalScope?.performance?.timing || {}) entry[key] = Math.max(_runtime.globalScope?.performance?.timing[key] - _runtime.originTime, 0);

    // ttfb is equiv to document's responseStart property in timing API --> https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/responseStart
    timeToFirstByte.update({
      value: entry.responseStart,
      attrs: {
        navigationEntry: entry
      }
    });
  }
}