"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subscribeToEOL = subscribeToEOL;
var _runtime = require("../constants/runtime");
var _pageVisibility = require("../window/page-visibility");
/**
 * Copyright 2020-2025 New Relic, Inc. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

if (_runtime.isWorkerScope) {
  _runtime.globalScope.cleanupTasks = []; // create new list on WorkerGlobalScope to track funcs to run before exiting thread

  const origClose = _runtime.globalScope.close;
  _runtime.globalScope.close = () => {
    // on worker's EoL signal, execute all "listeners", e.g. final harvests
    for (let task of _runtime.globalScope.cleanupTasks) {
      task();
    }
    origClose();
  };
}

/**
 * Subscribes a provided callback to the time/event when the agent should treat it as end-of-life.
 * This is used, for example, to submit a final harvest and send all remaining data on best-effort.
 * @param {function} cb - func to run before or during the last reliable event or time of an env's life span
 */
function subscribeToEOL(cb, capturePhase) {
  if (_runtime.isBrowserScope) {
    (0, _pageVisibility.subscribeToVisibilityChange)(cb, true, capturePhase); // when user switches tab or hides window, esp. mobile scenario
  } else if (_runtime.isWorkerScope) {
    _runtime.globalScope.cleanupTasks.push(cb); // close() should run these tasks before quitting thread
  }
  // By default (for other env), this fn has no effect.
}