"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subscribeToVisibilityChange = subscribeToVisibilityChange;
var _eventListenerOpts = require("../event-listener/event-listener-opts");
/**
 * Copyright 2020-2025 New Relic, Inc. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @param {function} cb - called when a visibility change occurs with the vis state at that time
 * @param {boolean} [toHiddenOnly=false] - only execute the 'cb' when the vis is changing to the hidden state; no arg is passed to 'cb' if used
 * @returns void
 */
function subscribeToVisibilityChange(cb, toHiddenOnly = false, capture, abortSignal) {
  (0, _eventListenerOpts.documentAddEventListener)('visibilitychange', handleVisibilityChange, capture, abortSignal);
  function handleVisibilityChange() {
    if (toHiddenOnly) {
      // trigger cb on change to hidden state only
      if (document.visibilityState === 'hidden') cb();
      return;
    }
    cb(document.visibilityState);
  }
}