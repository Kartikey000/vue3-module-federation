"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeRuntime = void 0;
var _configurable = require("./configurable");
var _runtime = require("../constants/runtime");
var _env = require("../constants/env.npm");
/**
 * Copyright 2020-2025 New Relic, Inc. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Module level count of harvests. This property will auto-increment each time it is accessed.
 * @type {number}
 */
let _harvestCount = 0;
const ReadOnly = {
  buildEnv: _env.BUILD_ENV,
  distMethod: _env.DIST_METHOD,
  version: _env.VERSION,
  originTime: _runtime.originTime
};
const RuntimeModel = {
  /** Agent-specific metadata found in the RUM call response. ex. entityGuid */
  appMetadata: {},
  customTransaction: undefined,
  denyList: undefined,
  disabled: false,
  entityManager: undefined,
  harvester: undefined,
  isolatedBacklog: false,
  isRecording: false,
  // true when actively recording, false when paused or stopped
  loaderType: undefined,
  maxBytes: 30000,
  obfuscator: undefined,
  onerror: undefined,
  ptid: undefined,
  releaseIds: {},
  session: undefined,
  timeKeeper: undefined,
  /** a proxy is set in agent-session to track jsAttributes changes for harvesting mechanics */
  jsAttributesMetadata: {
    bytes: 0
  },
  get harvestCount() {
    return ++_harvestCount;
  }
};
const mergeRuntime = runtime => {
  const modeledObject = (0, _configurable.getModeledObject)(runtime, RuntimeModel);
  const readonlyDescriptors = Object.keys(ReadOnly).reduce((descriptors, key) => {
    descriptors[key] = {
      value: ReadOnly[key],
      writable: false,
      configurable: true,
      enumerable: true
    };
    return descriptors;
  }, {});
  return Object.defineProperties(modeledObject, readonlyDescriptors);
};
exports.mergeRuntime = mergeRuntime;